@model List<Bakery.Models.CTHD>

@{
	ViewBag.Title = "Create";
}

<h2>Tạo mới</h2>
<div>
	@Html.ActionLink("Quay lại", "Index")
</div>
<hr />
<div>Ngày hóa đơn: @DateTime.Today.ToShortDateString()</div>
<div>Tổng tiền: <b id="total">0đ</b></div>

<hr />
<div class="input-group mb-3">
	<span class="input-group-text" id="basic-addon1">Tìm sản phẩm</span>
	<button type="button" class="btn btn-outline-secondary dropdown-toggle dropdown-toggle-split" data-bs-toggle="dropdown" aria-expanded="false">
	</button>
	<ul class="dropdown-menu" id="hints" style="width: 360px; max-height: 200px; overflow: auto">
		<i class="ps-3">...</i>
		@*<li class="dropdown-item btn">Act</li>*@
	</ul>
	<input type="text" id="search-inp" class="form-control" placeholder="Nhập tên hoặc mã sản phẩm" onkeyup="onSearchChange(event)">
	<button class="btn btn-primary" onclick="onSearch()">Tìm</button>
</div>
<div class="row" id="selected-product">
	@*<tr class="row">
		<td class="col-1">
			<img src="img" style="width: 100%; aspect-ratio: 1/1" />
		</td>
		<td class="col-3">
			TenSP
		</td>
		<td class="col-2">
			price
		</td>
		<td class="col-3">
			<button class="btn btn-primary" onclick="addToBill()">+</button>
		</td>
	</tr>*@
</div>

<hr />
<h3>Danh sách sản phẩm:</h3>
<form method="post">

	@Html.AntiForgeryToken()
	<table class="row" id="products">
		@*<tr class="row">
				<td class="col-1">
					<img src="img" style=" width: 100%; aspect-ratio: 1/1" />
				</td>
				<td class="col-3">
					TenSP
				</td>
				<td class="col-2">
					price
				</td>
				<td class="col-1">
					<input type="number" name="quant" value="" style="width: 100%" />
				</td>
				<td class="col-2">
					<button class="btn btn-secondary">x</button>
				</td>
			</tr>*@
	</table>

	<hr />
	<button class="btn btn-primary mt-3">Tạo hóa đơn</button>
</form>

@section Scripts {
	@Scripts.Render("~/bundles/jqueryval")

<script>
		let keyword = '';
		let searchDebounce = null;
		let hints = [];
		let selectedProduct = {};
		let products = [];

		function onSearchChange(e) {
			if (e.key === 'Enter') {
				onSearch();
				return;
			}

			showHints();
			$(e.target).focus();
			if (keyword == e.currentTarget.value) return;
			keyword = e.currentTarget.value;
			//if (!keyword || keyword == '') return;

			if (searchDebounce) clearTimeout(searchDebounce);
			searchDebounce = setTimeout(() => {
				$.get('/Admin/sanpham/gethints?keyword=' + keyword, (data) => {
					hints = data;
					let html = '';
					if (!hints || !hints.length) html = '<i class="ps-3"> Không tìm thấy</i>';
					for (let i = 0; i < data.length; i++) {
						var x = data[i];
						html += `
						<li class="dropdown-item btn" onclick="selectHint(${i})">
							<b>#${x.MaSP}</b> ${x.TenSP}
						</li>`
					}

					$('#hints').html(html);
				})
			}, 300)
		}

		function onSearch() {
			if(hints && hints.length) selectHint(0);
		}

		function showHints() {
			$('.dropdown-toggle').click();
		}

		function numberWithCommas(x) {
			return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
		}

		function selectHint(i) {
			let p = hints[i];
			selectedProduct = p;
			$('#search-inp').val('');

			let price;
			if (p.TiLeKM) price = `<del>${numberWithCommas(p.GiaSP)}đ</del><br />${numberWithCommas(p.GiaSP * (1 - p.TiLeKM))}đ`
			else price = `${numberWithCommas(p.GiaSP)}đ`;
			var html = `
				<tr class="row">
					<td class="col-1">
						<img src="${p.img}" style="width: 100%; aspect-ratio: 1/1" />
					</td>
					<td class="col-3">
						${p.TenSP}
					</td>
					<td class="col-2">
						${price}
					</td>
					<td class="col-3">
						<button class="btn btn-primary" onclick="addToBill()">+</button>
					</td>
				</tr>
			`
			$('#selected-product').html(html);
		}

		function addToBill() {
			let p = selectedProduct;
			if (products.find(x => x.MaSP == p.MaSP)) {
				alert('Đã có');
				return;
			}

			let price;
			if (p.TiLeKM) price = `<del>${numberWithCommas(p.GiaSP)}đ</del><br />${numberWithCommas(p.GiaSP * (1 - p.TiLeKM))}đ`
			else price = `${numberWithCommas(p.GiaSP)}đ`;
			let html = `
				<tr class="row mt-3 item" id="item-${p.MaSP}">
					<td class="col-1">
						<img src="${p.img}" style=" width: 100%; aspect-ratio: 1/1" />
					</td>
					<td class="col-3">
						${p.TenSP}
					</td>
					<td class="col-2">
						${price}
					</td>
					<td class="col-1">
						<input type="number" name="[${products.length}].MaSP" value="${p.MaSP}" hidden/>
						<input type="number" name="[${products.length}].SoLuong" value="1" min="1" max="${p.SoluongSP}"
						onkeydown="onQuantityKeydown(event)" onchange="onQuantityChange(event, ${p.MaSP})" />
					</td>
					<td class="col-1">
						/ ${p.SoluongSP}
					</td>
					<td class="col-2">
						<button class="btn btn-secondary" onclick="removeItem(${p.MaSP})">x</button>
					</td>
				</tr>
			`

			//$('#products').html($('#products').html() + html);
			$('#products').append(html);
			products.push({ ...p, quant: 1 });
			calcTotal();
		}

		function removeItem(id) {
			const index = products.indexOf(products.find(x => x.MaSP == id));
			if (index > -1) { // only splice array when item is found
				products.splice(index, 1); // 2nd parameter means remove one item only
				$(`#item-${id}`).remove();
				calcTotal();
			}
		}

		function calcTotal() {
			let total = products.reduce((t, c) => t + c.quant * c.GiaSP, 0)
			$('#total').html(numberWithCommas(total) + 'đ');
		}

		function onQuantityKeydown(event) {
			if (event.keyCode != 8 && event.keyCode < 48 || event.keyCode > 57) {
				event.preventDefault();
				return false;
			}
		}

		function onQuantityChange(event, id) {
			let val = event.target.value;
			if (isNaN(val) || val == "") event.target.value = 1;
			if (parseInt(event.target.value) > parseInt(event.target.max)) event.target.value = event.target.max;

			let p = products.find(x => x.MaSP == id);
			p.quant = event.target.value
			calcTotal();
		}
</script>
}
